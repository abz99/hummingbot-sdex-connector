# Docker Compose for Stellar Hummingbot Connector Observability Stack
# Production observability infrastructure

version: '3.8'

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: stellar-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/stellar_alerts.yml:/etc/prometheus/stellar_alerts.yml
      - prometheus_data:/prometheus
    networks:
      - stellar-observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Grafana - Visualization and dashboards  
  grafana:
    image: grafana/grafana:9.2.0
    container_name: stellar-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=stellar-admin-2024
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources  
      - grafana_data:/var/lib/grafana
    networks:
      - stellar-observability
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Alertmanager - Alert routing and notifications
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: stellar-alertmanager
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./alerting/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - stellar-observability  
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.4.0
    container_name: stellar-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    networks:
      - stellar-observability
    restart: unless-stopped
    pid: host
    
  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: stellar-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - stellar-observability
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
      
  # Loki - Log aggregation  
  loki:
    image: grafana/loki:2.9.0
    container_name: stellar-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - stellar-observability
    restart: unless-stopped
    
  # Promtail - Log shipping
  promtail:
    image: grafana/promtail:2.9.0
    container_name: stellar-promtail
    volumes:
      - /var/log:/var/log:ro
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - stellar-observability
    restart: unless-stopped
    depends_on:
      - loki
      
  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.37
    container_name: stellar-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp" 
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - stellar-observability
    restart: unless-stopped
    
  # Redis - Metrics caching and session storage
  redis:
    image: redis:7.0-alpine
    container_name: stellar-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass stellar-redis-2024
    volumes:
      - redis_data:/data
    networks:
      - stellar-observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  stellar-observability:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local  
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
  redis_data:
    driver: local