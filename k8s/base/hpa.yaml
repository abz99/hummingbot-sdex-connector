apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: stellar-hummingbot-connector-hpa
  labels:
    app: stellar-hummingbot-connector
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: stellar-hummingbot-connector
  minReplicas: 2
  maxReplicas: 10
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metrics-based scaling
  - type: Pods
    pods:
      metric:
        name: stellar_concurrent_operations
      target:
        type: AverageValue
        averageValue: "80"
  - type: Pods
    pods:
      metric:
        name: stellar_request_rate_per_second
      target:
        type: AverageValue
        averageValue: "100"
  # Object-based scaling (queue length)
  - type: Object
    object:
      metric:
        name: stellar_pending_orders_count
      target:
        type: Value
        value: "50"
      describedObject:
        apiVersion: v1
        kind: Service
        name: stellar-hummingbot-connector-service
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 minute
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: autoscaling/v2
kind: VerticalPodAutoscaler
metadata:
  name: stellar-hummingbot-connector-vpa
  labels:
    app: stellar-hummingbot-connector
    component: autoscaling
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: stellar-hummingbot-connector
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: stellar-connector
      minAllowed:
        cpu: 100m
        memory: 256Mi
      maxAllowed:
        cpu: 2000m
        memory: 4Gi
      controlledResources: ["cpu", "memory"]
      controlledValues: RequestsAndLimits
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: stellar-hummingbot-connector-pdb
  labels:
    app: stellar-hummingbot-connector
    component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: stellar-hummingbot-connector
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: stellar-hummingbot-connector-network-policy
  labels:
    app: stellar-hummingbot-connector
    component: security
spec:
  podSelector:
    matchLabels:
      app: stellar-hummingbot-connector
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow metrics scraping from Prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
  # Allow health checks from load balancer
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-system
    ports:
    - protocol: TCP
      port: 8080
  # Allow inter-pod communication
  - from:
    - podSelector:
        matchLabels:
          app: stellar-hummingbot-connector
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS to external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow HTTP for specific services
  - to: []
    ports:
    - protocol: TCP
      port: 80
  # Allow database connections
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow monitoring egress
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 3000  # Grafana