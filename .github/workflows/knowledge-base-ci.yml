name: Knowledge Base CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'team_startup.yaml'
      - 'knowledge/**'
      - 'hummingbot/connector/exchange/stellar/**'
      - 'docs/**'
      - 'qa/**'
      - 'security_tracking/**'
      - 'scripts/knowledge_base_*.py'
      - '**.md'
  pull_request:
    branches: [main]
    paths:
      - 'team_startup.yaml'
      - 'knowledge/**'
      - 'hummingbot/connector/exchange/stellar/**'
      - 'docs/**'
      - 'qa/**'
      - 'security_tracking/**'
      - 'scripts/knowledge_base_*.py'
      - '**.md'

jobs:
  validate-knowledge-base:
    name: Validate Knowledge Base Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml>=6.0 watchdog>=3.0
      
      - name: Validate configuration
        run: |
          python scripts/validate_knowledge_base_config.py team_startup.yaml
      
      - name: Check knowledge base sources
        run: |
          python scripts/knowledge_base_indexer.py --check-only
  
  update-knowledge-base:
    name: Update Knowledge Base Index
    runs-on: ubuntu-latest
    needs: validate-knowledge-base
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml>=6.0 watchdog>=3.0
      
      - name: Update knowledge base index
        run: |
          python scripts/knowledge_base_indexer.py --force
      
      - name: Generate index report
        run: |
          python scripts/knowledge_base_indexer.py --report > knowledge-base-report.json
      
      - name: Upload index report
        uses: actions/upload-artifact@v4
        with:
          name: knowledge-base-report
          path: knowledge-base-report.json
      
      - name: Check for index changes
        id: changes
        run: |
          if git diff --quiet knowledge/index/; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit updated index
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add knowledge/index/
          git commit -m "ü§ñ Update knowledge base index
          
          Automated update triggered by repository changes.
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
  
  validate-index-integrity:
    name: Validate Index Integrity
    runs-on: ubuntu-latest
    needs: update-knowledge-base
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml>=6.0 watchdog>=3.0
      
      - name: Validate index integrity
        run: |
          python -c "
          import json
          from pathlib import Path
          
          index_dir = Path('knowledge/index')
          if not index_dir.exists():
              print('‚ùå Index directory not found')
              exit(1)
          
          metadata_file = index_dir / 'metadata.json'
          if not metadata_file.exists():
              print('‚ùå Metadata file not found')
              exit(1)
          
          with open(metadata_file) as f:
              metadata = json.load(f)
          
          kb_count = len(metadata.get('knowledge_bases', {}))
          file_count = len(metadata.get('file_hashes', {}))
          
          print(f'‚úÖ Index integrity validated')
          print(f'   Knowledge bases: {kb_count}')
          print(f'   Tracked files: {file_count}')
          print(f'   Last updated: {metadata.get(\"last_updated\", \"unknown\")}')
          "
      
      - name: Check index coverage
        run: |
          python -c "
          import yaml
          import json
          from pathlib import Path
          
          # Load configuration
          with open('team_startup.yaml') as f:
              config = yaml.safe_load(f)
          
          expected_kbs = {kb['id'] for kb in config.get('knowledge_base', [])}
          
          # Load index metadata
          metadata_file = Path('knowledge/index/metadata.json')
          if metadata_file.exists():
              with open(metadata_file) as f:
                  metadata = json.load(f)
              indexed_kbs = set(metadata.get('knowledge_bases', {}).keys())
          else:
              indexed_kbs = set()
          
          missing_kbs = expected_kbs - indexed_kbs
          extra_kbs = indexed_kbs - expected_kbs
          
          if missing_kbs:
              print(f'‚ö†Ô∏è  Missing knowledge bases: {missing_kbs}')
          
          if extra_kbs:
              print(f'‚ÑπÔ∏è  Extra knowledge bases: {extra_kbs}')
          
          coverage = len(indexed_kbs & expected_kbs) / len(expected_kbs) * 100 if expected_kbs else 100
          print(f'üìä Index coverage: {coverage:.1f}% ({len(indexed_kbs & expected_kbs)}/{len(expected_kbs)})')
          
          if coverage < 90:
              print('‚ùå Index coverage below 90%')
              exit(1)
          else:
              print('‚úÖ Index coverage acceptable')
          "

  performance-benchmark:
    name: Knowledge Base Performance Benchmark
    runs-on: ubuntu-latest
    needs: validate-knowledge-base
    if: github.event_name == 'push' && (contains(github.ref, 'main') || contains(github.ref, 'develop'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml>=6.0 watchdog>=3.0
      
      - name: Benchmark indexing performance
        run: |
          echo "üöÄ Running knowledge base indexing performance benchmark..."
          
          # Time the indexing process
          start_time=$(date +%s)
          python scripts/knowledge_base_indexer.py --force
          end_time=$(date +%s)
          
          duration=$((end_time - start_time))
          
          echo "‚è±Ô∏è  Total indexing time: ${duration}s"
          
          # Generate report
          python scripts/knowledge_base_indexer.py --report > benchmark-report.json
          
          # Analyze performance
          python -c "
          import json
          
          with open('benchmark-report.json') as f:
              report = json.load(f)
          
          kb_count = report.get('knowledge_base_count', 0)
          file_count = report.get('tracked_file_count', 0)
          
          print(f'üìà Performance metrics:')
          print(f'   Knowledge bases: {kb_count}')
          print(f'   Tracked files: {file_count}')
          print(f'   Indexing time: ${duration}s')
          print(f'   Files per second: {file_count / max(duration, 1):.1f}')
          
          # Performance thresholds
          if duration > 60:
              print('‚ö†Ô∏è  Indexing took longer than 60 seconds')
          elif duration > 30:
              print('‚ö†Ô∏è  Indexing took longer than 30 seconds')
          else:
              print('‚úÖ Indexing performance acceptable')
          " duration=$duration
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: knowledge-base-benchmark
          path: benchmark-report.json

  security-scan:
    name: Security Scan Knowledge Base
    runs-on: ubuntu-latest
    needs: validate-knowledge-base
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Scan for secrets in knowledge base files
        uses: trufflesecurity/trufflehog@v3.63.2-beta
        with:
          path: ./knowledge/
          base: main
          head: HEAD
          extra_args: --only-verified
      
      - name: Check knowledge base permissions
        run: |
          echo "üîí Checking knowledge base file permissions..."
          
          # Check for world-writable files
          if find knowledge/ -type f -perm /o+w | grep -q .; then
              echo "‚ùå Found world-writable files in knowledge base"
              find knowledge/ -type f -perm /o+w
              exit 1
          else
              echo "‚úÖ No world-writable files found"
          fi
          
          # Check for executable files (should not be executable)
          if find knowledge/ -type f -name "*.md" -o -name "*.json" | xargs ls -l | grep -E '^-.*x'; then
              echo "‚ö†Ô∏è  Found executable documentation files"
              find knowledge/ -type f -name "*.md" -o -name "*.json" | xargs ls -l | grep -E '^-.*x'
          else
              echo "‚úÖ Documentation files have correct permissions"
          fi
      
      - name: Validate knowledge base content
        run: |
          echo "üîç Scanning knowledge base content for sensitive information..."
          
          # Check for potential secrets or sensitive data
          if grep -r -E "(password|secret|key|token)" knowledge/ --include="*.md" --include="*.json"; then
              echo "‚ö†Ô∏è  Found potentially sensitive keywords in knowledge base"
              echo "Please review the above matches to ensure no secrets are exposed"
          else
              echo "‚úÖ No obvious sensitive information found"
          fi
          
          # Check file sizes (prevent huge files)
          if find knowledge/ -type f -size +10M | grep -q .; then
              echo "‚ö†Ô∏è  Found large files in knowledge base:"
              find knowledge/ -type f -size +10M -exec ls -lh {} \;
              echo "Consider optimizing or excluding large files"
          else
              echo "‚úÖ All knowledge base files are reasonably sized"
          fi