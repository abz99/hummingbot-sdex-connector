name: 🔒 Claude-Resistant Compliance Enforcement

# CRITICAL: This workflow cannot be bypassed by Claude instances
# It runs on GitHub's servers independent of local environment

on:
  push:
    branches: [ main, develop, staging, feature/* ]
  pull_request:
    branches: [ main, develop, staging ]

  # TAMPER-PROOF: Scheduled checks that Claude cannot disable
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes - detect violations quickly

env:
  # IMMUTABLE: These patterns cannot be changed by Claude
  PYTEST_SKIP_PATTERNS: "pytest\\.skip\\(|@pytest\\.mark\\.skip\\(|pytestmark.*pytest\\.mark\\.skip"
  CICD_BYPASS_PATTERNS: "\\|\\|\\s*true|--no-verify|SKIP_COMPLIANCE_CHECK"
  QUALITY_BYPASS_PATTERNS: "#\\s*noqa\\s*$|#\\s*type:\\s*ignore\\s*$"

jobs:
  immutable-compliance-check:
    name: 🔒 Immutable Compliance Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # CRITICAL: This job cannot be modified or disabled by Claude
    # It operates independently of local development environment

    steps:
    - name: 📥 Checkout with Full History
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history to detect any tampering

    - name: 🔍 Detect pytest.skip Violations (IMMUTABLE)
      run: |
        echo "🔍 IMMUTABLE COMPLIANCE CHECK: pytest.skip violations"
        echo "=================================================="

        # This check cannot be bypassed by Claude because it runs on GitHub servers
        violations=$(find . -name "*.py" -path "./tests/*" \
          -not -path "./.github/*" \
          -not -path "./venv/*" \
          -not -path "./.coverage*" \
          -exec grep -Hn -E "$PYTEST_SKIP_PATTERNS" {} \; | \
          grep -v "skipif" | \
          grep -v "COMPLIANCE_VIOLATIONS_REPORT.md" || true)

        if [ -n "$violations" ]; then
          echo "❌ CRITICAL: pytest.skip VIOLATIONS DETECTED"
          echo "These violations bypass the rule: NEVER skip failing tests"
          echo ""
          echo "$violations"
          echo ""
          echo "🚨 ENFORCEMENT ACTION: Build terminated"
          echo "🔒 This check cannot be disabled by Claude instances"
          echo "✋ Human intervention required to resolve violations"
          exit 1
        else
          echo "✅ No pytest.skip violations found"
        fi

    - name: 🔍 Detect CI/CD Bypass Violations (IMMUTABLE)
      run: |
        echo "🔍 IMMUTABLE COMPLIANCE CHECK: CI/CD bypasses"
        echo "============================================="

        violations=$(find . \( -name "*.yml" -o -name "*.yaml" -o -name "*.sh" -o -name "*.py" \) \
          -not -path "./.github/workflows/claude-resistant-enforcement.yml" \
          -not -path "./.github/workflows/compliance-enforcement.yml" \
          -not -path "./venv/*" \
          -not -path "./scripts/setup-compliance-prevention.sh" \
          -not -path "./scripts/detect-compliance-tampering.sh" \
          -not -path "./scripts/create-tamper-proof-enforcement.sh" \
          -not -path "./scripts/check-compliance.sh" \
          -not -path "./scripts/check-failing-tests.sh" \
          -not -path "./scripts/deploy_to_kubernetes.sh" \
          -not -path "./scripts/install.sh" \
          -not -path "./.pre-commit-hooks/compliance-guard.py" \
          -not -path "./auto_accept_setup.sh" \
          -not -path "./.claude_session_guard.py" \
          -not -path "./.claude_emergency_recovery.sh" \
          -not -path "./fix_cursor.sh" \
          -not -path "./deployment/scripts/*" \
          -exec grep -Hn -E "$CICD_BYPASS_PATTERNS" {} \; | \
          grep -v "COMPLIANCE_VIOLATIONS_REPORT.md" | \
          grep -v "COMPLIANCE_PREVENTION_GUIDE.md" | \
          grep -v "docs/" || true)

        if [ -n "$violations" ]; then
          echo "❌ CRITICAL: CI/CD BYPASS VIOLATIONS DETECTED"
          echo "These violations compromise quality control:"
          echo ""
          echo "$violations"
          echo ""
          echo "🚨 ENFORCEMENT ACTION: Build terminated"
          echo "🔒 This check cannot be disabled by Claude instances"
          exit 1
        else
          echo "✅ No CI/CD bypass violations found"
        fi

    - name: 🔍 Detect Compliance Guard Tampering (IMMUTABLE)
      run: |
        echo "🔍 IMMUTABLE COMPLIANCE CHECK: Guard tampering detection"
        echo "======================================================="

        # Check if compliance guard exists and hasn't been neutered
        if [ ! -f ".pre-commit-hooks/compliance-guard.py" ]; then
          echo "❌ CRITICAL: Compliance guard deleted or moved"
          echo "🚨 Possible Claude tampering detected"
          exit 1
        fi

        # Check if compliance guard still has enforcement patterns
        if ! grep -q "pytest\\.skip" .pre-commit-hooks/compliance-guard.py; then
          echo "❌ CRITICAL: Compliance guard patterns removed"
          echo "🚨 Possible Claude tampering detected"
          exit 1
        fi

        # Check if DEVELOPMENT_RULES.md still prohibits skipping
        if ! grep -q "NEVER.*pytest.mark.skip.*bypass.*failing.*tests" DEVELOPMENT_RULES.md; then
          echo "❌ CRITICAL: DEVELOPMENT_RULES.md has been modified"
          echo "🚨 Possible Claude tampering detected"
          exit 1
        fi

        echo "✅ Compliance infrastructure intact"

    - name: 🔍 Git History Tampering Detection (IMMUTABLE)
      run: |
        echo "🔍 IMMUTABLE COMPLIANCE CHECK: Git history analysis"
        echo "=================================================="

        # Look for suspicious commit patterns that suggest Claude bypassing
        suspicious_commits=$(git log --oneline --all --grep="--no-verify\|SKIP_COMPLIANCE\|bypass.*hook\|disable.*compliance" || true)

        if [ -n "$suspicious_commits" ]; then
          echo "⚠️  WARNING: Suspicious commit messages detected:"
          echo "$suspicious_commits"
          echo ""
          echo "🔍 Manual review recommended"
        fi

        # Check for commits that might have bypassed hooks
        recent_commits=$(git log --oneline -10)
        echo "📊 Recent commits for audit trail:"
        echo "$recent_commits"

    - name: 🔍 Real-time Violation Scan (IMMUTABLE)
      run: |
        echo "🔍 IMMUTABLE COMPLIANCE CHECK: Real-time violation detection"
        echo "=========================================================="

        # Comprehensive scan that Claude cannot influence
        total_violations=0

        # Count each type of violation (excluding legitimate enforcement files)
        pytest_violations=$(find . -name "*.py" -path "./tests/*" \
          -not -path "./tests/adapted/__pycache__/*" \
          -exec grep -c -E "$PYTEST_SKIP_PATTERNS" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')

        cicd_violations=$(find . \( -name "*.yml" -o -name "*.yaml" -o -name "*.sh" \) \
          -not -path "./.github/workflows/claude-resistant-enforcement.yml" \
          -not -path "./.github/workflows/compliance-enforcement.yml" \
          -not -path "./scripts/setup-compliance-prevention.sh" \
          -not -path "./scripts/detect-compliance-tampering.sh" \
          -not -path "./scripts/create-tamper-proof-enforcement.sh" \
          -not -path "./scripts/check-compliance.sh" \
          -not -path "./scripts/check-failing-tests.sh" \
          -not -path "./scripts/deploy_to_kubernetes.sh" \
          -not -path "./scripts/install.sh" \
          -not -path "./auto_accept_setup.sh" \
          -not -path "./.claude_session_guard.py" \
          -not -path "./.claude_emergency_recovery.sh" \
          -not -path "./fix_cursor.sh" \
          -not -path "./deployment/scripts/*" \
          -exec grep -c -E "$CICD_BYPASS_PATTERNS" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')

        echo "📊 VIOLATION COUNTS:"
        echo "   pytest.skip violations: $pytest_violations (Required: 0)"
        echo "   CI/CD bypass violations: $cicd_violations (Required: 0)"

        total_violations=$((pytest_violations + cicd_violations))

        if [ $total_violations -gt 0 ]; then
          echo ""
          echo "❌ CRITICAL COMPLIANCE FAILURE"
          echo "🚨 Total violations: $total_violations"
          echo "📖 Violations detected against DEVELOPMENT_RULES.md"
          echo "🔒 This enforcement cannot be bypassed by Claude"
          echo ""
          echo "✋ REQUIRED ACTIONS:"
          echo "   1. Human review of all violations"
          echo "   2. Fix underlying issues (do not bypass)"
          echo "   3. Restore compliance before proceeding"
          exit 1
        else
          echo ""
          echo "✅ COMPLIANCE STATUS: PASSED"
          echo "🎯 Zero violations detected - system integrity maintained"
        fi

    - name: 📧 Alert on Violations (IMMUTABLE)
      if: failure()
      run: |
        echo "🚨 CRITICAL COMPLIANCE VIOLATION ALERT"
        echo "====================================="
        echo "Time: $(date -u)"
        echo "Branch: ${GITHUB_REF##*/}"
        echo "Commit: $GITHUB_SHA"
        echo "Workflow: Claude-Resistant Enforcement"
        echo ""
        echo "🔒 This alert was generated by tamper-proof GitHub Actions"
        echo "🤖 Possible Claude bypass attempt detected"
        echo "✋ Human intervention required immediately"
        echo ""
        echo "📖 Reference: DEVELOPMENT_RULES.md - NEVER skip failing tests"
        echo "🛡️ Prevention system: .pre-commit-hooks/compliance-guard.py"

  # CRITICAL: This job verifies the enforcement system itself
  guard-integrity-check:
    name: 🛡️ Compliance Guard Integrity Verification
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Verify Guard File Integrity
      run: |
        echo "🔍 Verifying compliance guard integrity..."

        # Check file exists
        if [ ! -f ".pre-commit-hooks/compliance-guard.py" ]; then
          echo "❌ CRITICAL: Compliance guard missing"
          exit 1
        fi

        # Check file has not been neutered (still contains enforcement patterns)
        required_patterns=(
          "pytest\\.skip"
          "pytest\\.mark\\.skip"
          "\\|\\|\\s\\*true"
          "--no-verify"
          "COMMIT BLOCKED"
        )

        for pattern in "${required_patterns[@]}"; do
          if ! grep -q "$pattern" .pre-commit-hooks/compliance-guard.py; then
            echo "❌ CRITICAL: Required pattern missing: $pattern"
            echo "🚨 Compliance guard may have been tampered with"
            exit 1
          fi
        done

        echo "✅ Compliance guard integrity verified"

    - name: 🔍 Verify Rule File Integrity
      run: |
        echo "🔍 Verifying DEVELOPMENT_RULES.md integrity..."

        # Check critical rule still exists
        if ! grep -q "NEVER.*pytest.mark.skip.*bypass.*failing.*tests" DEVELOPMENT_RULES.md; then
          echo "❌ CRITICAL: Core rule modified or removed"
          echo "🚨 DEVELOPMENT_RULES.md may have been tampered with"
          exit 1
        fi

        echo "✅ DEVELOPMENT_RULES.md integrity verified"

# IMMUTABLE: This workflow runs every 30 minutes and cannot be disabled by Claude
# It provides continuous monitoring independent of local development environment