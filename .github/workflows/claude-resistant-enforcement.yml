name: üîí Claude-Resistant Compliance Enforcement

# CRITICAL: This workflow cannot be bypassed by Claude instances
# It runs on GitHub's servers independent of local environment

on:
  push:
    branches: [ main, develop, staging, feature/* ]
  pull_request:
    branches: [ main, develop, staging ]

  # TAMPER-PROOF: Scheduled checks that Claude cannot disable
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes - detect violations quickly

env:
  # IMMUTABLE: These patterns cannot be changed by Claude
  PYTEST_SKIP_PATTERNS: "pytest\\.skip\\(|@pytest\\.mark\\.skip\\(|pytestmark.*pytest\\.mark\\.skip"
  CICD_BYPASS_PATTERNS: "\\|\\|\\s*true|--no-verify|SKIP_COMPLIANCE_CHECK"
  QUALITY_BYPASS_PATTERNS: "#\\s*noqa\\s*$|#\\s*type:\\s*ignore\\s*$"

jobs:
  immutable-compliance-check:
    name: üîí Immutable Compliance Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # CRITICAL: This job cannot be modified or disabled by Claude
    # It operates independently of local development environment

    steps:
    - name: üì• Checkout with Full History
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history to detect any tampering

    - name: üîç Detect pytest.skip Violations (IMMUTABLE)
      run: |
        echo "üîç IMMUTABLE COMPLIANCE CHECK: pytest.skip violations"
        echo "=================================================="

        # This check cannot be bypassed by Claude because it runs on GitHub servers
        violations=$(find . -name "*.py" -path "./tests/*" \
          -not -path "./.github/*" \
          -not -path "./venv/*" \
          -not -path "./.coverage*" \
          -exec grep -Hn -E "$PYTEST_SKIP_PATTERNS" {} \; | \
          grep -v "skipif" | \
          grep -v "COMPLIANCE_VIOLATIONS_REPORT.md" || true)

        if [ -n "$violations" ]; then
          echo "‚ùå CRITICAL: pytest.skip VIOLATIONS DETECTED"
          echo "These violations bypass the rule: NEVER skip failing tests"
          echo ""
          echo "$violations"
          echo ""
          echo "üö® ENFORCEMENT ACTION: Build terminated"
          echo "üîí This check cannot be disabled by Claude instances"
          echo "‚úã Human intervention required to resolve violations"
          exit 1
        else
          echo "‚úÖ No pytest.skip violations found"
        fi

    - name: üîç Detect CI/CD Bypass Violations (IMMUTABLE)
      run: |
        echo "üîç IMMUTABLE COMPLIANCE CHECK: CI/CD bypasses"
        echo "============================================="

        violations_found=0

        # TARGETED CHECK 1: Dangerous git commit bypasses in shell scripts
        echo "üîç Checking for dangerous git commit bypasses..."
        git_violations=$(find . -name "*.sh" -not -path "./scripts/setup-compliance-prevention.sh" \
          -not -path "./scripts/detect-compliance-tampering.sh" \
          -not -path "./scripts/create-tamper-proof-enforcement.sh" -not -path "./venv/*" \
          -exec grep -Hn "git.*commit.*--no-verify\|git.*push.*--no-verify" {} \; || true)

        if [ -n "$git_violations" ]; then
          echo "‚ùå CRITICAL: Git hook bypass violations detected:"
          echo "$git_violations"
          violations_found=1
        fi

        # TARGETED CHECK 2: CI pipeline error suppression patterns
        echo "üîç Checking for CI pipeline error suppression..."
        ci_suppressions=$(find . -name "*.yml" -path "./.github/workflows/*" \
          -not -path "./.github/workflows/claude-resistant-enforcement.yml" \
          -not -path "./.github/workflows/compliance-enforcement.yml" \
          -exec grep -Hn "|| true.*#.*bypass\||| true.*#.*ignore\||| true.*#.*skip" {} \; || true)

        if [ -n "$ci_suppressions" ]; then
          echo "‚ùå CRITICAL: CI pipeline suppression violations detected:"
          echo "$ci_suppressions"
          violations_found=1
        fi

        # TARGETED CHECK 3: Explicit compliance bypass variables
        echo "üîç Checking for explicit compliance bypasses..."
        bypass_vars=$(find . \( -name "*.py" -o -name "*.sh" \) -not -path "./venv/*" \
          -not -path "./scripts/setup-compliance-prevention.sh" \
          -not -path "./scripts/detect-compliance-tampering.sh" \
          -not -path "./scripts/create-tamper-proof-enforcement.sh" \
          -not -path "./scripts/compliance-watchdog.py" \
          -not -path "./.pre-commit-hooks/compliance-guard.py" \
          -exec grep -Hn "SKIP_COMPLIANCE_CHECK\s*=\s*[\"']?1[\"']?\|SKIP_COMPLIANCE_CHECK\s*=\s*[\"']?true[\"']?" {} \; || true)

        if [ -n "$bypass_vars" ]; then
          echo "‚ùå CRITICAL: Compliance bypass variables detected:"
          echo "$bypass_vars"
          violations_found=1
        fi

        if [ $violations_found -eq 1 ]; then
          echo ""
          echo "üö® ENFORCEMENT ACTION: Build terminated"
          echo "üîí This check cannot be disabled by Claude instances"
          echo "‚úã Human intervention required to resolve violations"
          exit 1
        else
          echo "‚úÖ No targeted CI/CD bypass violations found"
        fi

    - name: üîç Detect Compliance Guard Tampering (IMMUTABLE)
      run: |
        echo "üîç IMMUTABLE COMPLIANCE CHECK: Guard tampering detection"
        echo "======================================================="

        # Check if compliance guard exists and hasn't been neutered
        if [ ! -f ".pre-commit-hooks/compliance-guard.py" ]; then
          echo "‚ùå CRITICAL: Compliance guard deleted or moved"
          echo "üö® Possible Claude tampering detected"
          exit 1
        fi

        # Check if compliance guard still has enforcement patterns
        if ! grep -q "pytest\\.skip" .pre-commit-hooks/compliance-guard.py; then
          echo "‚ùå CRITICAL: Compliance guard patterns removed"
          echo "üö® Possible Claude tampering detected"
          exit 1
        fi

        # Check if DEVELOPMENT_RULES.md still prohibits skipping
        if ! grep -q "NEVER.*pytest.mark.skip.*bypass.*failing.*tests" DEVELOPMENT_RULES.md; then
          echo "‚ùå CRITICAL: DEVELOPMENT_RULES.md has been modified"
          echo "üö® Possible Claude tampering detected"
          exit 1
        fi

        echo "‚úÖ Compliance infrastructure intact"

    - name: üîç Git History Tampering Detection (IMMUTABLE)
      run: |
        echo "üîç IMMUTABLE COMPLIANCE CHECK: Git history analysis"
        echo "=================================================="

        # Look for suspicious commit patterns that suggest Claude bypassing
        suspicious_commits=$(git log --oneline --all --grep="--no-verify\|SKIP_COMPLIANCE\|bypass.*hook\|disable.*compliance" || true)

        if [ -n "$suspicious_commits" ]; then
          echo "‚ö†Ô∏è  WARNING: Suspicious commit messages detected:"
          echo "$suspicious_commits"
          echo ""
          echo "üîç Manual review recommended"
        fi

        # Check for commits that might have bypassed hooks
        recent_commits=$(git log --oneline -10)
        echo "üìä Recent commits for audit trail:"
        echo "$recent_commits"

    - name: üîç Real-time Violation Scan (IMMUTABLE)
      run: |
        echo "üîç IMMUTABLE COMPLIANCE CHECK: Real-time violation detection"
        echo "=========================================================="

        # Comprehensive scan that Claude cannot influence
        total_violations=0

        # Count each type of violation with targeted detection
        pytest_violations=$(find . -name "*.py" -path "./tests/*" \
          -not -path "./tests/adapted/__pycache__/*" \
          -exec grep -c -E "$PYTEST_SKIP_PATTERNS" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')

        # Targeted CI/CD violation counting (not broad pattern matching)
        git_bypass_violations=$(find . -name "*.sh" -not -path "./scripts/setup-compliance-prevention.sh" \
          -not -path "./scripts/detect-compliance-tampering.sh" \
          -not -path "./scripts/create-tamper-proof-enforcement.sh" -not -path "./venv/*" \
          -exec grep -c "git.*commit.*--no-verify\|git.*push.*--no-verify" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')

        ci_suppression_violations=$(find . -name "*.yml" -path "./.github/workflows/*" \
          -not -path "./.github/workflows/claude-resistant-enforcement.yml" \
          -not -path "./.github/workflows/compliance-enforcement.yml" \
          -exec grep -c "|| true.*#.*bypass\||| true.*#.*ignore\||| true.*#.*skip" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')

        bypass_var_violations=$(find . \( -name "*.py" -o -name "*.sh" \) -not -path "./venv/*" \
          -not -path "./scripts/setup-compliance-prevention.sh" \
          -not -path "./scripts/detect-compliance-tampering.sh" \
          -not -path "./scripts/create-tamper-proof-enforcement.sh" \
          -not -path "./scripts/compliance-watchdog.py" \
          -not -path "./.pre-commit-hooks/compliance-guard.py" \
          -exec grep -c "SKIP_COMPLIANCE_CHECK\s*=\s*[\"']?1[\"']?\|SKIP_COMPLIANCE_CHECK\s*=\s*[\"']?true[\"']?" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')

        cicd_violations=$((git_bypass_violations + ci_suppression_violations + bypass_var_violations))

        echo "üìä TARGETED VIOLATION COUNTS:"
        echo "   pytest.skip violations: $pytest_violations (Required: 0)"
        echo "   git bypass violations: $git_bypass_violations (Required: 0)"
        echo "   CI suppression violations: $ci_suppression_violations (Required: 0)"
        echo "   bypass variable violations: $bypass_var_violations (Required: 0)"
        echo "   total CI/CD violations: $cicd_violations (Required: 0)"

        total_violations=$((pytest_violations + cicd_violations))

        if [ $total_violations -gt 0 ]; then
          echo ""
          echo "‚ùå CRITICAL COMPLIANCE FAILURE"
          echo "üö® Total violations: $total_violations"
          echo "üìñ Violations detected against DEVELOPMENT_RULES.md"
          echo "üîí This enforcement cannot be bypassed by Claude"
          echo ""
          echo "‚úã REQUIRED ACTIONS:"
          echo "   1. Human review of all violations"
          echo "   2. Fix underlying issues (do not bypass)"
          echo "   3. Restore compliance before proceeding"
          exit 1
        else
          echo ""
          echo "‚úÖ COMPLIANCE STATUS: PASSED"
          echo "üéØ Zero violations detected - system integrity maintained"
        fi

    - name: üìß Alert on Violations (IMMUTABLE)
      if: failure()
      run: |
        echo "üö® CRITICAL COMPLIANCE VIOLATION ALERT"
        echo "====================================="
        echo "Time: $(date -u)"
        echo "Branch: ${GITHUB_REF##*/}"
        echo "Commit: $GITHUB_SHA"
        echo "Workflow: Claude-Resistant Enforcement"
        echo ""
        echo "üîí This alert was generated by tamper-proof GitHub Actions"
        echo "ü§ñ Possible Claude bypass attempt detected"
        echo "‚úã Human intervention required immediately"
        echo ""
        echo "üìñ Reference: DEVELOPMENT_RULES.md - NEVER skip failing tests"
        echo "üõ°Ô∏è Prevention system: .pre-commit-hooks/compliance-guard.py"

  # CRITICAL: This job verifies the enforcement system itself
  guard-integrity-check:
    name: üõ°Ô∏è Compliance Guard Integrity Verification
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üîç Verify Guard File Integrity
      run: |
        echo "üîç Verifying compliance guard integrity..."

        # Check file exists
        if [ ! -f ".pre-commit-hooks/compliance-guard.py" ]; then
          echo "‚ùå CRITICAL: Compliance guard missing"
          exit 1
        fi

        # Check file has not been neutered (still contains enforcement patterns)
        required_patterns=(
          "pytest\\.skip"
          "pytest\\.mark\\.skip"
          "\\|\\|\\s\\*true"
          "\\--no-verify"
          "COMMIT BLOCKED"
        )

        for pattern in "${required_patterns[@]}"; do
          if ! grep -q "$pattern" .pre-commit-hooks/compliance-guard.py; then
            echo "‚ùå CRITICAL: Required pattern missing: $pattern"
            echo "üö® Compliance guard may have been tampered with"
            exit 1
          fi
        done

        echo "‚úÖ Compliance guard integrity verified"

    - name: üîç Verify Rule File Integrity
      run: |
        echo "üîç Verifying DEVELOPMENT_RULES.md integrity..."

        # Check critical rule still exists
        if ! grep -q "NEVER.*pytest.mark.skip.*bypass.*failing.*tests" DEVELOPMENT_RULES.md; then
          echo "‚ùå CRITICAL: Core rule modified or removed"
          echo "üö® DEVELOPMENT_RULES.md may have been tampered with"
          exit 1
        fi

        echo "‚úÖ DEVELOPMENT_RULES.md integrity verified"

# IMMUTABLE: This workflow runs every 30 minutes and cannot be disabled by Claude
# It provides continuous monitoring independent of local development environment