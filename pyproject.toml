[build-system]
requires = ["setuptools>=64", "wheel", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "stellar-hummingbot-connector-v3"
description = "Advanced Stellar DEX connector for Hummingbot with enterprise security"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "Stellar Hummingbot Team", email = "dev@stellar.org"}
]
keywords = [
    "stellar", "hummingbot", "defi", "trading", "connector", "blockchain"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "stellar-sdk>=8.0.0",
    "aiohttp>=3.9.0",
    "cryptography>=41.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pyjwt>=2.8.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "tenacity>=8.2.0",
    "asyncio-throttle>=1.0.2",
    "uvloop>=0.19.0"
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "black>=23.12.0",
    "flake8>=7.0.0",
    "flake8-docstrings>=1.7.0", 
    "flake8-import-order>=0.18.2",
    "flake8-annotations>=3.0.1",
    "mypy>=1.8.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pre-commit>=3.6.0",
    "coverage>=7.4.0"
]
security = [
    "pycryptodome>=3.19.0",
    "hsm-client>=1.0.0",
    "azure-keyvault>=4.7.0",
    "boto3>=1.34.0"
]
performance = [
    "orjson>=3.9.0",
    "msgpack>=1.0.7",
    "redis>=5.0.1"
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "factory-boy>=3.3.0",
    "faker>=22.0.0"
]

[project.urls]
Homepage = "https://github.com/stellar/stellar-hummingbot-connector-v3"
Documentation = "https://docs.stellar.org/hummingbot-connector"
Repository = "https://github.com/stellar/stellar-hummingbot-connector-v3"
Issues = "https://github.com/stellar/stellar-hummingbot-connector-v3/issues"
Changelog = "https://github.com/stellar/stellar-hummingbot-connector-v3/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["hummingbot*"]
exclude = ["tests*", "docs*"]

[tool.setuptools_scm]
version_file = "hummingbot/connector/exchange/stellar/_version.py"

# Black Configuration
[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["hummingbot"]
known_third_party = ["stellar_sdk", "aiohttp", "cryptography", "pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_alphabetical_sort_within_sections = true

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "stellar_sdk.*",
    "aiohttp.*",
    "cryptography.*",
    "pydantic.*",
    "structlog.*",
    "prometheus_client.*",
    "tenacity.*",
    "asyncio_throttle.*"
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=hummingbot",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=85",
    "--durations=10",
    "-v"
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "security: Security-focused tests",
    "performance: Performance tests",
    "slow: Slow running tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage Configuration  
[tool.coverage.run]
branch = true
source = ["hummingbot"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abc.abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"