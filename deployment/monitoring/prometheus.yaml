apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: stellar-hummingbot
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
    spec:
      serviceAccountName: prometheus-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=50GB'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        ports:
        - name: prometheus
          containerPort: 9090
          protocol: TCP
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-storage
          mountPath: /prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
          readOnly: true
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: prometheus
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: prometheus
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: stellar-hummingbot
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: prometheus
    port: 9090
    targetPort: prometheus
    protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: stellar-hummingbot
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: stellar-hummingbot
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-pvc
  namespace: stellar-hummingbot
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp3-ssd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: stellar-hummingbot
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'stellar-hummingbot-prod'
        environment: 'production'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager-service:9093
    
    scrape_configs:
      # Stellar Hummingbot Connector
      - job_name: 'stellar-hummingbot'
        static_configs:
          - targets: ['stellar-hummingbot-service:8080']
        metrics_path: /metrics
        scrape_interval: 10s
        scrape_timeout: 5s
        honor_labels: true
        
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
          
      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
          
      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - stellar-hummingbot
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
          
      # cAdvisor
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: stellar-hummingbot
data:
  stellar-hummingbot.yml: |
    groups:
    - name: stellar-hummingbot.rules
      rules:
      # High-level availability
      - alert: StellarHummingbotDown
        expr: up{job="stellar-hummingbot"} == 0
        for: 1m
        labels:
          severity: critical
          service: stellar-hummingbot
        annotations:
          summary: "Stellar Hummingbot instance is down"
          description: "Stellar Hummingbot instance {{ $labels.instance }} has been down for more than 1 minute."
          
      # High error rate
      - alert: StellarHummingbotHighErrorRate
        expr: rate(stellar_errors_total[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
          service: stellar-hummingbot
        annotations:
          summary: "High error rate in Stellar Hummingbot"
          description: "Error rate is {{ $value }} errors per second on {{ $labels.instance }}"
          
      # High response time
      - alert: StellarHummingbotHighLatency
        expr: histogram_quantile(0.95, rate(stellar_network_request_duration_seconds_bucket[5m])) > 5
        for: 3m
        labels:
          severity: warning
          service: stellar-hummingbot
        annotations:
          summary: "High response time in Stellar Hummingbot"
          description: "95th percentile response time is {{ $value }}s on {{ $labels.instance }}"
          
      # Memory usage
      - alert: StellarHummingbotHighMemoryUsage
        expr: container_memory_usage_bytes{pod=~"stellar-hummingbot-connector-.*"} / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          service: stellar-hummingbot
        annotations:
          summary: "High memory usage in Stellar Hummingbot"
          description: "Memory usage is {{ $value | humanizePercentage }} on {{ $labels.pod }}"
          
      # CPU usage
      - alert: StellarHummingbotHighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{pod=~"stellar-hummingbot-connector-.*"}[5m]) / container_spec_cpu_quota * container_spec_cpu_period > 0.8
        for: 5m
        labels:
          severity: warning
          service: stellar-hummingbot
        annotations:
          summary: "High CPU usage in Stellar Hummingbot"
          description: "CPU usage is {{ $value | humanizePercentage }} on {{ $labels.pod }}"
          
      # Low account balance
      - alert: StellarHummingbotLowBalance
        expr: stellar_account_balance_xlm < 10
        for: 1m
        labels:
          severity: warning
          service: stellar-hummingbot
        annotations:
          summary: "Low account balance"
          description: "Account balance is {{ $value }} XLM on {{ $labels.account_id }}"
          
      # Circuit breaker open
      - alert: StellarHummingbotCircuitBreakerOpen
        expr: stellar_circuit_breaker_state >= 1
        for: 30s
        labels:
          severity: critical
          service: stellar-hummingbot
        annotations:
          summary: "Circuit breaker is open"
          description: "Circuit breaker is open for {{ $labels.operation }} on {{ $labels.instance }}"