# Production Secrets Configuration for Stellar Hummingbot Connector
# NOTE: This is a template - actual secrets should be managed through external secret management

apiVersion: v1
kind: Secret
metadata:
  name: stellar-hummingbot-secrets
  namespace: stellar-hummingbot
  labels:
    app.kubernetes.io/name: stellar-hummingbot-connector
    app.kubernetes.io/component: secrets
  annotations:
    # External Secrets Operator annotations for production
    external-secrets.io/backend: "vault"
    external-secrets.io/key-name: "stellar-hummingbot"
    external-secrets.io/property: "all"
type: Opaque
data:
  # HSM Configuration (Base64 encoded)
  # In production, these should be managed by HashiCorp Vault or AWS Secrets Manager
  hsm-enabled: dHJ1ZQ==  # true
  hsm-pin: ""  # Provided by external secret management
  hsm-slot: MA==  # 0
  hsm-token-label: ""  # Provided by external secret management
  
  # Stellar Network Configuration
  stellar-network-passphrase: "VGVzdCBTREYgTmV0d29yayA7IFNlcHRlbWJlciAyMDE1"  # Test SDF Network ; September 2015 (for staging)
  stellar-horizon-url: "aHR0cHM6Ly9ob3Jpem9uLXRlc3RuZXQuc3RlbGxhci5vcmc="  # https://horizon-testnet.stellar.org
  stellar-soroban-url: "aHR0cHM6Ly9zb3JvYmFuLXRlc3RuZXQuc3RlbGxhci5vcmc="  # https://soroban-testnet.stellar.org
  
  # Private Keys (NEVER commit actual keys - use external secret management)
  private-key: ""  # Managed externally
  backup-private-key: ""  # Managed externally
  
  # Database Credentials
  db-username: ""  # Managed externally
  db-password: ""  # Managed externally
  db-connection-string: ""  # Managed externally
  
  # Redis Configuration
  redis-password: ""  # Managed externally
  redis-connection-string: ""  # Managed externally
  
  # Monitoring and Alerting
  grafana-admin-password: ""  # Managed externally
  prometheus-auth-token: ""  # Managed externally
  sentry-dsn: ""  # Managed externally
  webhook-url: ""  # Managed externally
  
  # API Keys and Tokens
  stellar-lab-api-key: ""  # Managed externally
  
  # SSL/TLS Certificates
  tls-cert: ""  # Managed externally
  tls-key: ""  # Managed externally
  ca-cert: ""  # Managed externally
  
  # Encryption Keys
  jwt-secret: ""  # Managed externally
  encryption-key: ""  # Managed externally
  signing-key: ""  # Managed externally

---
# External Secret for production secret management
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: stellar-hummingbot-external-secret
  namespace: stellar-hummingbot
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: stellar-hummingbot-secrets
    creationPolicy: Owner
  data:
  - secretKey: hsm-pin
    remoteRef:
      key: stellar-hummingbot
      property: hsm_pin
  - secretKey: hsm-token-label
    remoteRef:
      key: stellar-hummingbot
      property: hsm_token_label
  - secretKey: private-key
    remoteRef:
      key: stellar-hummingbot
      property: private_key
  - secretKey: backup-private-key
    remoteRef:
      key: stellar-hummingbot
      property: backup_private_key
  - secretKey: db-username
    remoteRef:
      key: stellar-hummingbot
      property: db_username
  - secretKey: db-password
    remoteRef:
      key: stellar-hummingbot
      property: db_password
  - secretKey: redis-password
    remoteRef:
      key: stellar-hummingbot
      property: redis_password
  - secretKey: prometheus-auth-token
    remoteRef:
      key: stellar-hummingbot
      property: prometheus_token
  - secretKey: sentry-dsn
    remoteRef:
      key: stellar-hummingbot
      property: sentry_dsn
  - secretKey: jwt-secret
    remoteRef:
      key: stellar-hummingbot
      property: jwt_secret
  - secretKey: encryption-key
    remoteRef:
      key: stellar-hummingbot
      property: encryption_key
  - secretKey: grafana-admin-password
    remoteRef:
      key: stellar-hummingbot
      property: grafana_admin_password

---
# SecretStore for HashiCorp Vault integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: stellar-hummingbot
spec:
  provider:
    vault:
      server: "https://vault.company.com:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "stellar-hummingbot"
          serviceAccountRef:
            name: stellar-hummingbot-sa
            
---
# Pod Security Policy for production
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: stellar-hummingbot-psp
  namespace: stellar-hummingbot
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1000
        max: 65535
  readOnlyRootFilesystem: true