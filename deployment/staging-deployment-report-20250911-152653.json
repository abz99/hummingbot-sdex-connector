{
  "deployment_summary": {
    "deployment_id": "staging-20250911-152653",
    "environment": "simulated-staging",
    "timestamp": "20250911-152653",
    "phases": {
      "prerequisites": {
        "name": "prerequisites",
        "status": "success",
        "checks": {
          "python": {
            "status": "success",
            "version": "3.11.2",
            "details": "Python environment ready"
          },
          "dir_hummingbot/connector/exchange/stellar": {
            "status": "success",
            "details": "Directory hummingbot/connector/exchange/stellar exists"
          },
          "dir_deployment/kubernetes": {
            "status": "success",
            "details": "Directory deployment/kubernetes exists"
          },
          "dir_deployment/security": {
            "status": "success",
            "details": "Directory deployment/security exists"
          },
          "dir_deployment/monitoring": {
            "status": "success",
            "details": "Directory deployment/monitoring exists"
          },
          "file_hummingbot/connector/exchange/stellar/stellar_exchange.py": {
            "status": "success",
            "details": "File hummingbot/connector/exchange/stellar/stellar_exchange.py exists"
          },
          "file_deployment/kubernetes/deployment-production.yaml": {
            "status": "success",
            "details": "File deployment/kubernetes/deployment-production.yaml exists"
          },
          "file_deployment/security/security_validation.py": {
            "status": "success",
            "details": "File deployment/security/security_validation.py exists"
          }
        },
        "duration": 0.0010280609130859375
      },
      "security_validation": {
        "name": "security_validation",
        "status": "warning",
        "validation_results": {
          "summary": {
            "total_checks": 15,
            "passed": 14,
            "failed": 1,
            "success_rate": "93.3%"
          },
          "severity_breakdown": {
            "critical": 0,
            "high": 0,
            "medium": 1,
            "low": 0
          },
          "failed_checks": {
            "critical": [],
            "high": [],
            "medium": [
              {
                "name": "prometheus_authentication",
                "details": "Missing authentication for Prometheus",
                "remediation": null
              }
            ],
            "low": []
          },
          "deployment_readiness": {
            "ready_for_staging": true,
            "ready_for_production": true,
            "recommendations": [
              "\u2705 Security validation passed - ready for staging deployment",
              "\ud83d\ude80 Excellent security posture - ready for production deployment"
            ]
          }
        },
        "duration": 0.23858261108398438
      },
      "container_build": {
        "name": "container_build",
        "status": "success",
        "build_info": {
          "dockerfile": "available",
          "image_tag": "stellar-hummingbot-connector:staging-20250911-152653",
          "build_status": "simulated_success"
        },
        "duration": 1.0016505718231201
      },
      "configuration_validation": {
        "name": "configuration_validation",
        "status": "success",
        "configs": {
          "deployment-production.yaml": "valid",
          "rbac.yaml": "valid",
          "namespace.yaml": "valid",
          "prometheus.yaml": "valid",
          "grafana.yaml": "valid",
          "secrets.yaml": "valid"
        },
        "duration": 0.0005588531494140625
      },
      "application_testing": {
        "name": "application_testing",
        "status": "success",
        "test_results": {
          "unit_tests": "failed",
          "unit_test_output": "\u001b[1m============================= test session starts ==============================\u001b[0m\nplatform linux -- Python 3.11.2, pytest-8.4.2, pluggy-1.6.0\nbenchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/abz/projects/stellar-hummingbot-connector-v3\nconfigfile: pytest.ini\nplugins: typeguard-2.13.3, asyncio-1.1.0, cov-6.2.1, benchmark-5.1.0\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollected 81 items\n\ntests/unit/test_order_lifecycle.py \u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[33m                     [ 20%]\u001b[0m\ntests/unit/test_stellar_chain_contract.py \u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[31m                [ 39%]\u001b[0m\ntests/unit/test_stellar_exchange_contract.py \u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31m                 [ 53%]\u001b[0m\ntests/unit/test_stellar_path_engine_contract.py \u001b[32m.\u001b[0m\u001b[31mF\u001b[0m\u001b[32m.\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31m              [ 66%]\u001b[0m\ntests/unit/test_stellar_security_contract.py \u001b[31mF\u001b[0m\u001b[32m.\u001b[0m\u001b[31mF\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[31m              [ 83%]\u001b[0m\ntests/unit/test_stellar_soroban_contract.py \u001b[32m.\u001b[0m\u001b[31mF\u001b[0m\u001b[31mF\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[31mE\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[31m                [100%]\u001b[0m\n\n==================================== ERRORS ====================================\n\u001b[31m\u001b[1m_ ERROR at setup of TestArbitrageDetection.test_arbitrage_opportunity_detection _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 230\n      @pytest.mark.asyncio\n      async def test_arbitrage_opportunity_detection(self, mock_arbitrage_engine, sample_assets):\n          \"\"\"Test detection of profitable arbitrage opportunities.\n\n          QA_ID: REQ-PATH-002\n          Acceptance Criteria: assert opportunity.profit_percentage > Decimal('0.001') and opportunity.risk_score < 0.7\n          \"\"\"\n          from hummingbot.connector.exchange.stellar.stellar_path_payment_engine import (\n              ArbitrageOpportunity,\n              PathPaymentRoute,\n              PathType,\n          )\n\n          # Mock profitable arbitrage detection\n          async def mock_detect_arbitrage(assets, min_profit_percentage):\n              # Create buy route (cheaper)\n              buy_route = PathPaymentRoute(\n                  path=[assets[0], assets[1]],  # XLM -> USDC\n                  source_amount=Decimal(\"1000\"),\n                  destination_amount=Decimal(\"100\"),  # 1000 XLM -> 100 USDC\n                  path_type=PathType.DIRECT,\n                  estimated_cost=Decimal(\"1\"),\n                  estimated_time_seconds=5,\n                  liquidity_available=Decimal(\"10000\"),\n                  price_impact=Decimal(\"0.001\"),\n                  confidence_score=Decimal(\"0.95\"),\n                  expires_at=time.time() + 30,\n                  dex_sources=[\"stellar_dex\"],\n              )\n\n              # Create sell route (more expensive)\n              sell_route = PathPaymentRoute(\n                  path=[assets[1], assets[0]],  # USDC -> XLM\n                  source_amount=Decimal(\"100\"),\n                  destination_amount=Decimal(\"1020\"),  # 100 USDC -> 1020 XLM (profit!)\n                  path_type=PathType.DIRECT,\n                  estimated_cost=Decimal(\"0.5\"),\n                  estimated_time_seconds=5,\n                  liquidity_available=Decimal(\"8000\"),\n                  price_impact=Decimal(\"0.002\"),\n                  confidence_score=Decimal(\"0.90\"),\n                  expires_at=time.time() + 30,\n                  dex_sources=[\"soroswap\"],\n              )\n\n              # Calculate arbitrage opportunity\n              profit_amount = Decimal(\"1020\") - Decimal(\"1000\")  # 20 XLM profit\n              profit_percentage = profit_amount / Decimal(\"1000\")  # 2% profit\n\n              opportunity = ArbitrageOpportunity(\n                  source_asset=assets[0],\n                  destination_asset=assets[1],\n                  buy_route=buy_route,\n                  sell_route=sell_route,\n                  profit_amount=profit_amount,\n                  profit_percentage=profit_percentage,\n                  risk_score=Decimal(\"0.3\"),  # Low risk\n                  execution_time_window=120,  # 2 minutes\n                  required_capital=Decimal(\"1000\"),\n              )\n\n              return [opportunity] if profit_percentage >= min_profit_percentage else []\n\n          mock_arbitrage_engine.detect_arbitrage_opportunities = mock_detect_arbitrage\n\n          # Test arbitrage detection\n          assets = [sample_assets[\"XLM\"], sample_assets[\"USDC\"]]\n          opportunities = await mock_arbitrage_engine.detect_arbitrage_opportunities(\n              assets=assets, min_profit_percentage=Decimal(\"0.001\")\n          )\n\n          # Assertions (QA requirement)\n          assert len(opportunities) > 0\n          opportunity = opportunities[0]\n          assert opportunity.profit_percentage > Decimal(\"0.001\")\n          assert opportunity.risk_score < 0.7\n          assert opportunity.profit_amount > Decimal(\"0\")\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 223\n      @pytest.fixture\n      def mock_arbitrage_engine(self, mock_path_engine):\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_arbitrage_engine, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:223\n\u001b[31m\u001b[1m___ ERROR at setup of TestArbitrageDetection.test_arbitrage_risk_assessment ____\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 308\n      @pytest.mark.asyncio\n      async def test_arbitrage_risk_assessment(self, mock_arbitrage_engine, sample_assets):\n          \"\"\"Test arbitrage opportunity risk assessment.\"\"\"\n          from hummingbot.connector.exchange.stellar.stellar_path_payment_engine import ArbitrageOpportunity\n\n          def calculate_arbitrage_risk(opportunity):\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 223\n      @pytest.fixture\n      def mock_arbitrage_engine(self, mock_path_engine):\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_arbitrage_engine, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:223\n\u001b[31m\u001b[1m_ ERROR at setup of TestArbitrageDetection.test_arbitrage_filtering_by_profitability _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 354\n      @pytest.mark.asyncio\n      async def test_arbitrage_filtering_by_profitability(self, mock_arbitrage_engine):\n          \"\"\"Test filtering arbitrage opportunities by profitability.\"\"\"\n          # Mock multiple opportunities with different profit levels\n          opportunities = []\n          profit_levels = [Decimal(\"0.0005\"), Decimal(\"0.002\"), Decimal(\"0.05\"), Decimal(\"0.001\")]\n\n          for i, profit_pct in enumerate(profit_levels):\n              opportunity = Mock()\n              opportunity.profit_percentage = profit_pct\n              opportunity.profit_amount = Decimal(\"1000\") * profit_pct\n              opportunity.risk_score = Decimal(\"0.3\")\n              opportunity.source_asset = Mock()\n              opportunity.destination_asset = Mock()\n              opportunities.append(opportunity)\n\n          # Filter by minimum profitability\n          min_profit = Decimal(\"0.001\")\n          filtered_opportunities = [opp for opp in opportunities if opp.profit_percentage >= min_profit]\n\n          # Should filter out low profit opportunities\n          assert len(filtered_opportunities) == 3  # Only 3 meet minimum\n          assert all(opp.profit_percentage >= min_profit for opp in filtered_opportunities)\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 223\n      @pytest.fixture\n      def mock_arbitrage_engine(self, mock_path_engine):\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_arbitrage_engine, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:223\n\u001b[31m\u001b[1m_ ERROR at setup of TestArbitrageDetection.test_cross_dex_arbitrage_detection __\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 378\n      @pytest.mark.asyncio\n      async def test_cross_dex_arbitrage_detection(self, mock_arbitrage_engine, sample_assets):\n          \"\"\"Test cross-DEX arbitrage opportunity detection.\"\"\"\n          # Mock DEX price differences\n          dex_prices = {\n              \"stellar_dex\": {\"XLM-USDC\": Decimal(\"0.100\")},\n              \"soroswap\": {\"XLM-USDC\": Decimal(\"0.102\")},  # 2% higher price\n              \"aquarius\": {\"XLM-USDC\": Decimal(\"0.099\")},  # 1% lower price\n          }\n\n          def find_cross_dex_opportunities(asset_pair, dex_prices):\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 223\n      @pytest.fixture\n      def mock_arbitrage_engine(self, mock_path_engine):\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_arbitrage_engine, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:223\n\u001b[31m\u001b[1m___ ERROR at setup of TestMEVProtection.test_mev_protection_private_mempool ____\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 430\n      @pytest.mark.asyncio\n      async def test_mev_protection_private_mempool(self, mock_path_engine):\n          \"\"\"Test MEV protection via private mempool.\n\n          QA_ID: REQ-PATH-003\n          Acceptance Criteria: assert protection_result.method == 'private_mempool' and protection_result.protected == True\n          \"\"\"\n          from hummingbot.connector.exchange.stellar.stellar_path_payment_engine import PathPaymentRoute, PathType\n\n          # Mock MEV protection implementation\n          async def mock_apply_mev_protection(transaction_id, route):\n              protection_levels = {\n                  \"none\": {\"method\": \"standard\", \"protected\": False, \"cost\": 0},\n                  \"standard\": {\"method\": \"private_mempool\", \"protected\": True, \"cost\": 100},\n                  \"premium\": {\"method\": \"flashbots\", \"protected\": True, \"cost\": 500},\n              }\n\n              # Choose protection based on transaction value\n              if route.source_amount > Decimal(\"10000\"):\n                  protection = protection_levels[\"premium\"]\n              elif route.source_amount > Decimal(\"1000\"):\n                  protection = protection_levels[\"standard\"]\n              else:\n                  protection = protection_levels[\"none\"]\n\n              return {\"transaction_id\": f\"protected_{transaction_id}\", **protection}\n\n          mock_path_engine._apply_mev_protection = mock_apply_mev_protection\n\n          # Test MEV protection for medium-value transaction\n          test_route = PathPaymentRoute(\n              path=[Asset.native(), Asset(\"USDC\", \"GCKFBEIYTKP5RNAHAEUFLMIDKN5YFIF53MWKQK6VUD5XHAVTVL7LFLBV\")],\n              source_amount=Decimal(\"5000\"),  # Medium value transaction\n              destination_amount=Decimal(\"500\"),\n              path_type=PathType.DIRECT,\n              estimated_cost=Decimal(\"5\"),\n              estimated_time_seconds=10,\n              liquidity_available=Decimal(\"50000\"),\n              price_impact=Decimal(\"0.001\"),\n              confidence_score=Decimal(\"0.95\"),\n              expires_at=time.time() + 30,\n          )\n\n          protection_result = await mock_path_engine._apply_mev_protection(\"tx_123\", test_route)\n\n          # Assertions (QA requirement)\n          assert protection_result[\"method\"] == \"private_mempool\"\n          assert protection_result[\"protected\"] is True\n          assert \"protected_\" in protection_result[\"transaction_id\"]\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:430\n\u001b[31m\u001b[1m_ ERROR at setup of TestMEVProtection.test_mev_protection_cost_benefit_analysis _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 480\n      @pytest.mark.asyncio\n      async def test_mev_protection_cost_benefit_analysis(self, mock_path_engine):\n          \"\"\"Test MEV protection cost-benefit analysis.\"\"\"\n\n          def calculate_protection_value(transaction_amount, potential_mev_loss, protection_cost):\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:480\n\u001b[31m\u001b[1m_ ERROR at setup of TestMEVProtection.test_mev_protection_timing_considerations _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 515\n      @pytest.mark.asyncio\n      async def test_mev_protection_timing_considerations(self, mock_path_engine):\n          \"\"\"Test MEV protection timing and execution strategy.\"\"\"\n\n          class MEVProtectionStrategy:\n              def __init__(self):\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:515\n\u001b[31m\u001b[1m___ ERROR at setup of TestMEVProtection.test_mev_protection_failure_handling ___\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py, line 577\n      @pytest.mark.asyncio\n      async def test_mev_protection_failure_handling(self, mock_path_engine):\n          \"\"\"Test MEV protection failure and fallback mechanisms.\"\"\"\n\n          class MEVProtectionManager:\n              async def apply_protection(self, transaction, method=\"standard\"):\n                  \"\"\"Apply MEV protection with fallback.\"\"\"\n                  try:\n                      if method == \"flashbots\":\n                          # Simulate flashbots failure\n                          if self._flashbots_available():\n                              return {\"success\": True, \"method\": \"flashbots\"}\n                          else:\n                              raise ConnectionError(\"Flashbots relay unavailable\")\n                      elif method == \"private_mempool\":\n                          return {\"success\": True, \"method\": \"private_mempool\"}\n                      else:\n                          return {\"success\": True, \"method\": \"standard\"}\n\n                  except ConnectionError:\n                      # Fallback to next best method\n                      if method == \"flashbots\":\n                          return await self.apply_protection(transaction, \"private_mempool\")\n                      elif method == \"private_mempool\":\n                          return await self.apply_protection(transaction, \"standard\")\n                      else:\n                          return {\"success\": False, \"method\": \"none\", \"error\": \"All protection methods failed\"}\n\n              def _flashbots_available(self):\n\u001b[31mE       fixture 'mock_path_engine' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_path_engine_contract.py:577\n\u001b[31m\u001b[1m_ ERROR at setup of TestCrossContractExecution.test_atomic_cross_contract_execution _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 168\n      @pytest.mark.asyncio\n      async def test_atomic_cross_contract_execution(self, mock_contract_manager, sample_operations):\n          \"\"\"Test atomic execution of multiple contract operations.\n\n          QA_ID: REQ-SOROBAN-002\n          Acceptance Criteria: assert len(results) == len(operations) and all(r.success for r in results)\n          \"\"\"\n\n          # Mock successful atomic execution\n          def mock_execute_atomic(operations, source_account, atomic=True):\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_operations, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:168\n\u001b[31m\u001b[1m_ ERROR at setup of TestCrossContractExecution.test_cross_contract_rollback_on_failure _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 203\n      @pytest.mark.asyncio\n      async def test_cross_contract_rollback_on_failure(self, mock_contract_manager, sample_operations):\n          \"\"\"Test rollback when one operation in atomic batch fails.\"\"\"\n\n          # Mock partial failure - second operation fails\n          def mock_execute_with_failure(operations, source_account, atomic=True):\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_operations, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:203\n\u001b[31m\u001b[1m_ ERROR at setup of TestCrossContractExecution.test_non_atomic_execution_partial_success _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 229\n      @pytest.mark.asyncio\n      async def test_non_atomic_execution_partial_success(self, mock_contract_manager, sample_operations):\n          \"\"\"Test non-atomic execution allows partial success.\"\"\"\n\n          # Mock partial success in non-atomic mode\n          def mock_execute_non_atomic(operations, source_account, atomic=False):\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_operations, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:229\n\u001b[31m\u001b[1m_ ERROR at setup of TestCrossContractExecution.test_cross_contract_simulation_before_execution _\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 264\n      @pytest.mark.asyncio\n      async def test_cross_contract_simulation_before_execution(self, mock_contract_manager, sample_operations):\n          \"\"\"Test simulation before cross-contract execution.\"\"\"\n          # Mock simulation for each operation\n          mock_simulations = [\n              {\"success\": True, \"gas_used\": 150000, \"return_value\": \"simulation_1\"},\n              {\"success\": True, \"gas_used\": 200000, \"return_value\": \"simulation_2\"},\n          ]\n\n          mock_contract_manager.simulate_contract = AsyncMock()\n          mock_contract_manager.simulate_contract.side_effect = mock_simulations\n\n          # Simulate each operation before execution\n          simulation_results = []\n          for operation in sample_operations:\n              sim_result = await mock_contract_manager.simulate_contract(\n                  contract_address=operation.contract_address,\n                  function_name=operation.function_name,\n                  parameters=operation.parameters,\n                  source_account=\"ACCOUNT123\",\n              )\n              simulation_results.append(sim_result)\n\n          # All simulations should succeed\n          assert all(sim[\"success\"] for sim in simulation_results)\n          assert sum(sim[\"gas_used\"] for sim in simulation_results) == 350000\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_operations, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:264\n\u001b[31m\u001b[1m_______ ERROR at setup of TestGasEstimation.test_gas_estimation_accuracy _______\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 298\n      @pytest.mark.asyncio\n      async def test_gas_estimation_accuracy(self, mock_contract_manager):\n          \"\"\"Test gas estimation within 10% of actual consumption.\n\n          QA_ID: REQ-SOROBAN-003\n          Acceptance Criteria: assert abs(estimated - actual) / actual <= 0.1\n          \"\"\"\n          # Mock gas estimation and actual execution results\n          _estimated_gas = 150000\n          actual_gas = 145000  # Within 10% of estimate (3.3% difference)\n\n          # Mock estimation function\n          async def mock_estimate_gas(contract_address, function_name, parameters):\n              # Simulate gas estimation logic\n              base_gas = {\"swap\": 120000, \"add_liquidity\": 180000, \"remove_liquidity\": 160000}.get(function_name, 100000)\n\n              # Add complexity factors\n              param_complexity = len(str(parameters)) * 100\n              return base_gas + param_complexity\n\n          mock_contract_manager.estimate_gas = mock_estimate_gas\n\n          # Test gas estimation\n          estimated = await mock_contract_manager.estimate_gas(\n              contract_address=\"CONTRACT123\", function_name=\"swap\", parameters={\"amount\": \"1000\", \"token\": \"USDC\"}\n          )\n\n          # Simulate actual execution (would be done in real execution)\n          actual = actual_gas\n\n          # Calculate accuracy\n          accuracy_ratio = abs(estimated - actual) / actual\n\n          # Assertions (QA requirement)\n          assert accuracy_ratio <= 0.1  # Within 10% accuracy\n          assert estimated > 0\n          assert actual > 0\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:298\n\u001b[31m\u001b[1m__ ERROR at setup of TestGasEstimation.test_gas_estimation_complexity_scaling __\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 336\n      @pytest.mark.asyncio\n      async def test_gas_estimation_complexity_scaling(self, mock_contract_manager):\n          \"\"\"Test gas estimation scales with operation complexity.\"\"\"\n\n          async def mock_complex_estimate(contract_address, function_name, parameters):\n              base_gas = 100000\n\n              # Scale gas based on parameter complexity\n              complexity_factors = {\"simple_swap\": 1.0, \"multi_hop_swap\": 2.5, \"complex_arbitrage\": 4.0}\n\n              factor = complexity_factors.get(function_name, 1.0)\n              param_size_factor = len(json.dumps(parameters)) / 100\n\n              return int(base_gas * factor * (1 + param_size_factor))\n\n          mock_contract_manager.estimate_gas = mock_complex_estimate\n\n          # Test different complexity levels\n          simple_params = {\"amount\": \"1000\"}\n          complex_params = {\n              \"path\": [\"USDC\", \"XLM\", \"AQUA\", \"BTC\"],\n              \"amounts\": [1000, 2000, 1500, 800],\n              \"slippage_tolerance\": \"0.05\",\n              \"deadline\": 1234567890,\n          }\n\n          simple_estimate = await mock_contract_manager.estimate_gas(\"CONTRACT123\", \"simple_swap\", simple_params)\n\n          complex_estimate = await mock_contract_manager.estimate_gas(\"CONTRACT123\", \"complex_arbitrage\", complex_params)\n\n          # Complex operations should require more gas\n          assert complex_estimate > simple_estimate\n          assert complex_estimate > simple_estimate * 2  # At least 2x for complex operations\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:336\n\u001b[31m\u001b[1m_______ ERROR at setup of TestGasEstimation.test_gas_estimation_caching ________\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 370\n      @pytest.mark.asyncio\n      async def test_gas_estimation_caching(self, mock_contract_manager):\n          \"\"\"Test gas estimation caching for repeated operations.\"\"\"\n          call_count = 0\n\n          async def mock_cached_estimate(contract_address, function_name, parameters):\n              nonlocal call_count\n              call_count += 1\n              return 150000  # Fixed estimate\n\n          # Mock caching mechanism\n          cache = {}\n\n          async def cached_estimate_gas(contract_address, function_name, parameters):\n              cache_key = f\"{contract_address}:{function_name}:{hash(str(parameters))}\"\n\n              if cache_key in cache:\n                  return cache[cache_key]\n\n              estimate = await mock_cached_estimate(contract_address, function_name, parameters)\n              cache[cache_key] = estimate\n              return estimate\n\n          mock_contract_manager.estimate_gas = cached_estimate_gas\n\n          # Make multiple identical requests\n          params = {\"amount\": \"1000\", \"token\": \"USDC\"}\n\n          estimate1 = await mock_contract_manager.estimate_gas(\"CONTRACT123\", \"swap\", params)\n          estimate2 = await mock_contract_manager.estimate_gas(\"CONTRACT123\", \"swap\", params)\n          estimate3 = await mock_contract_manager.estimate_gas(\"CONTRACT123\", \"swap\", params)\n\n          # All estimates should be identical\n          assert estimate1 == estimate2 == estimate3\n\n          # Should only call estimation function once due to caching\n          assert call_count == 1\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:370\n\u001b[31m\u001b[1m__ ERROR at setup of TestGasEstimation.test_gas_estimation_network_conditions __\u001b[0m\nfile /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py, line 408\n      @pytest.mark.asyncio\n      async def test_gas_estimation_network_conditions(self, mock_contract_manager):\n          \"\"\"Test gas estimation adjustments for network conditions.\"\"\"\n\n          async def mock_network_adjusted_estimate(contract_address, function_name, parameters):\n              base_estimate = 150000\n\n              # Simulate network condition adjustments\n              network_congestion_factor = 1.2  # 20% increase for congestion\n              priority_multiplier = 1.0  # Standard priority\n\n              adjusted_estimate = int(base_estimate * network_congestion_factor * priority_multiplier)\n              return adjusted_estimate\n\n          mock_contract_manager.estimate_gas = mock_network_adjusted_estimate\n\n          estimate = await mock_contract_manager.estimate_gas(\"CONTRACT123\", \"swap\", {\"amount\": \"1000\"})\n\n          # Should include network condition adjustments\n          assert estimate == 180000  # 150000 * 1.2\n          assert estimate > 150000  # Higher than base estimate\n\u001b[31mE       fixture 'mock_contract_manager' not found\u001b[0m\n\u001b[31m>       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, benchmark, benchmark_weave, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop, event_loop_policy, health_monitor, health_monitor_config, metrics_collector, mock_chain_interface, mock_error_manager, mock_observability, mock_stellar_exchange, mock_stellar_logger, mock_stellar_metrics, mock_trading_pair, monkeypatch, network_config, network_manager, no_cover, prometheus_registry, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, security_config, security_manager, temp_keystore_path, test_helpers, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_stream_tracker\u001b[0m\n\u001b[31m>       use 'pytest --fixtures [testpath]' for help on them.\u001b[0m\n\n/home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_soroban_contract.py:408\n=================================== FAILURES ===================================\n\u001b[31m\u001b[1m__________ TestTransactionBuilding.test_transaction_building_accuracy __________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_chain_contract.py\u001b[0m:67: in test_transaction_building_accuracy\n    \u001b[0mtransaction = \u001b[94mawait\u001b[39;49;00m mock_chain_interface.build_payment_transaction(\u001b[90m\u001b[39;49;00m\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'ModernStellarChainInterface' object has no attribute 'build_payment_transaction'\u001b[0m\n\u001b[31m\u001b[1m______ TestTransactionBuilding.test_transaction_building_with_custom_fee _______\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_chain_contract.py\u001b[0m:96: in test_transaction_building_with_custom_fee\n    \u001b[0mtransaction = \u001b[94mawait\u001b[39;49;00m mock_chain_interface.build_payment_transaction(\u001b[90m\u001b[39;49;00m\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'ModernStellarChainInterface' object has no attribute 'build_payment_transaction'\u001b[0m\n\u001b[31m\u001b[1m_____ TestTransactionBuilding.test_transaction_building_validation_failure _____\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_chain_contract.py\u001b[0m:111: in test_transaction_building_validation_failure\n    \u001b[0m\u001b[94mawait\u001b[39;49;00m mock_chain_interface.build_payment_transaction(\u001b[90m\u001b[39;49;00m\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'ModernStellarChainInterface' object has no attribute 'build_payment_transaction'\u001b[0m\n\u001b[31m\u001b[1m_________ TestSequenceNumberHandling.test_sequence_conflict_resolution _________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_chain_contract.py\u001b[0m:151: in test_sequence_conflict_resolution\n    \u001b[0mBadRequestError(\u001b[33m\"\u001b[39;49;00m\u001b[33mBad sequence number\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m),\u001b[90m\u001b[39;49;00m\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mvenv/lib/python3.11/site-packages/stellar_sdk/exceptions.py\u001b[0m:137: in __init__\n    \u001b[0m\u001b[96msuper\u001b[39;49;00m().\u001b[92m__init__\u001b[39;49;00m(response)\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mvenv/lib/python3.11/site-packages/stellar_sdk/exceptions.py\u001b[0m:102: in __init__\n    \u001b[0m\u001b[96mself\u001b[39;49;00m.message: \u001b[96mstr\u001b[39;49;00m = response.text\u001b[90m\u001b[39;49;00m\n                        ^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'str' object has no attribute 'text'\u001b[0m\n\u001b[31m\u001b[1m___________ TestSequenceNumberHandling.test_sequence_number_refresh ____________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_chain_contract.py\u001b[0m:192: in test_sequence_number_refresh\n    \u001b[0m\u001b[94mawait\u001b[39;49;00m mock_chain_interface_with_retry._refresh_sequence_number()\u001b[90m\u001b[39;49;00m\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'ModernStellarChainInterface' object has no attribute '_refresh_sequence_number'\u001b[0m\n\u001b[31m\u001b[1m___________ TestSequenceNumberHandling.test_max_retry_limit_exceeded ___________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_chain_contract.py\u001b[0m:201: in test_max_retry_limit_exceeded\n    \u001b[0mmock_chain_interface_with_retry._server.submit_transaction.side_effect = BadRequestError(\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mvenv/lib/python3.11/site-packages/stellar_sdk/exceptions.py\u001b[0m:137: in __init__\n    \u001b[0m\u001b[96msuper\u001b[39;49;00m().\u001b[92m__init__\u001b[39;49;00m(response)\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mvenv/lib/python3.11/site-packages/stellar_sdk/exceptions.py\u001b[0m:102: in __init__\n    \u001b[0m\u001b[96mself\u001b[39;49;00m.message: \u001b[96mstr\u001b[39;49;00m = response.text\u001b[90m\u001b[39;49;00m\n                        ^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'str' object has no attribute 'text'\u001b[0m\n\u001b[31m\u001b[1m____ TestStellarExchangeInitialization.test_exchange_initialization_success ____\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:69: in test_exchange_initialization_success\n    \u001b[0m\u001b[94mfrom\u001b[39;49;00m\u001b[90m \u001b[39;49;00m\u001b[04m\u001b[96mhummingbot\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mcore\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mdata_type\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mcommon\u001b[39;49;00m\u001b[90m \u001b[39;49;00m\u001b[94mimport\u001b[39;49;00m ConnectorStatus\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   ModuleNotFoundError: No module named 'hummingbot.core'\u001b[0m\n\u001b[31m\u001b[1m_ TestStellarExchangeInitialization.test_exchange_initialization_network_failure _\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:103: in test_exchange_initialization_network_failure\n    \u001b[0m\u001b[94mfrom\u001b[39;49;00m\u001b[90m \u001b[39;49;00m\u001b[04m\u001b[96mhummingbot\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mcore\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mdata_type\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mcommon\u001b[39;49;00m\u001b[90m \u001b[39;49;00m\u001b[94mimport\u001b[39;49;00m ConnectorStatus\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   ModuleNotFoundError: No module named 'hummingbot.core'\u001b[0m\n\u001b[31m\u001b[1m________ TestTradingPairValidation.test_trading_pair_validation_success ________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:138: in test_trading_pair_validation_success\n    \u001b[0mvalidated_pairs = exchange_instance._validate_trading_pairs(valid_pairs)\u001b[90m\u001b[39;49;00m\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'StellarExchange' object has no attribute '_validate_trading_pairs'\u001b[0m\n\u001b[31m\u001b[1m____ TestTradingPairValidation.test_trading_pair_validation_invalid_format _____\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:150: in test_trading_pair_validation_invalid_format\n    \u001b[0mexchange_instance._validate_trading_pairs(invalid_pairs)\u001b[90m\u001b[39;49;00m\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'StellarExchange' object has no attribute '_validate_trading_pairs'\u001b[0m\n\u001b[31m\u001b[1m__________ TestTradingPairValidation.test_trading_pair_normalization ___________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:159: in test_trading_pair_normalization\n    \u001b[0mnormalized = exchange_instance._normalize_trading_pairs(input_pairs)\u001b[90m\u001b[39;49;00m\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'StellarExchange' object has no attribute '_normalize_trading_pairs'\u001b[0m\n\u001b[31m\u001b[1m_______________ TestBalanceQuerying.test_balance_query_accuracy ________________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:206: in test_balance_query_accuracy\n    \u001b[0mbalances = \u001b[94mawait\u001b[39;49;00m exchange.get_account_balances()\u001b[90m\u001b[39;49;00m\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'StellarExchange' object has no attribute 'get_account_balances'\u001b[0m\n\u001b[31m\u001b[1m________ TestBalanceQuerying.test_balance_query_network_error_handling _________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:233: in test_balance_query_network_error_handling\n    \u001b[0mbalances = \u001b[94mawait\u001b[39;49;00m exchange.get_account_balances()\u001b[90m\u001b[39;49;00m\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'StellarExchange' object has no attribute 'get_account_balances'\u001b[0m\n\u001b[31m\u001b[1m______________ TestBalanceQuerying.test_balance_caching_mechanism ______________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:261: in test_balance_caching_mechanism\n    \u001b[0m\u001b[94mawait\u001b[39;49;00m exchange.get_account_balances()\u001b[90m\u001b[39;49;00m\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AttributeError: 'StellarExchange' object has no attribute 'get_account_balances'\u001b[0m\n\u001b[31m\u001b[1m__________ TestPerformanceBenchmarks.test_order_placement_latency_sla __________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:306: in test_order_placement_latency_sla\n    \u001b[0m\u001b[94mawait\u001b[39;49;00m performance_exchange.place_order(\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   TypeError: StellarExchange.place_order() got an unexpected keyword argument 'trade_type'\u001b[0m\n\u001b[31m\u001b[1m_______ TestPerformanceBenchmarks.test_concurrent_operations_throughput ________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:368: in test_concurrent_operations_throughput\n    \u001b[0m\u001b[94massert\u001b[39;49;00m success_rate >= \u001b[94m0.95\u001b[39;49;00m, \u001b[33mf\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m\u001b[33mSuccess rate \u001b[39;49;00m\u001b[33m{\u001b[39;49;00msuccess_rate\u001b[33m}\u001b[39;49;00m\u001b[33m below 95% requirement\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AssertionError: Success rate 0.0 below 95% requirement\u001b[0m\n\u001b[1m\u001b[31mE   assert 0.0 >= 0.95\u001b[0m\n\u001b[31m\u001b[1m____________ TestExchangeLifecycle.test_exchange_graceful_shutdown _____________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_exchange_contract.py\u001b[0m:392: in test_exchange_graceful_shutdown\n    \u001b[0m\u001b[94mfrom\u001b[39;49;00m\u001b[90m \u001b[39;49;00m\u001b[04m\u001b[96mhummingbot\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mcore\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mdata_type\u001b[39;49;00m\u001b[04m\u001b[96m.\u001b[39;49;00m\u001b[04m\u001b[96mcommon\u001b[39;49;00m\u001b[90m \u001b[39;49;00m\u001b[94mimport\u001b[39;49;00m ConnectorStatus\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   ModuleNotFoundError: No module named 'hummingbot.core'\u001b[0m\n\u001b[31m\u001b[1m___________ TestOptimalPathFinding.test_multi_hop_path_optimization ____________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_path_engine_contract.py\u001b[0m:153: in test_multi_hop_path_optimization\n    \u001b[0m\u001b[94massert\u001b[39;49;00m \u001b[96mlen\u001b[39;49;00m(optimal_route.path) == \u001b[94m3\u001b[39;49;00m  \u001b[90m# Multi-hop\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AssertionError: assert 2 == 3\u001b[0m\n\u001b[1m\u001b[31mE    +  where 2 = len([<stellar_sdk.asset.Asset object at 0x7f727725d050>, <stellar_sdk.asset.Asset object at 0x7f727725f090>])\u001b[0m\n\u001b[1m\u001b[31mE    +    where [<stellar_sdk.asset.Asset object at 0x7f727725d050>, <stellar_sdk.asset.Asset object at 0x7f727725f090>] = PathPaymentRoute(path=[<stellar_sdk.asset.Asset object at 0x7f727725d050>, <stellar_sdk.asset.Asset object at 0x7f7277...ct=Decimal('0.005'), confidence_score=Decimal('0.90'), expires_at=1757604449.856942, dex_sources=[], gas_estimate=None).path\u001b[0m\n\u001b[31m\u001b[1m_________ TestSecurityCompliance.test_no_hardcoded_secrets_in_codebase _________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_security_contract.py\u001b[0m:70: in test_no_hardcoded_secrets_in_codebase\n    \u001b[0mfound_secrets = scan_for_secrets(safe_code)\u001b[90m\u001b[39;49;00m\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mtests/unit/test_stellar_security_contract.py\u001b[0m:51: in scan_for_secrets\n    \u001b[0mmatches = re.findall(pattern, file_content, re.IGNORECASE)\u001b[90m\u001b[39;49;00m\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31m/usr/lib/python3.11/re/__init__.py\u001b[0m:216: in findall\n    \u001b[0m\u001b[94mreturn\u001b[39;49;00m _compile(pattern, flags).findall(string)\u001b[90m\u001b[39;49;00m\n           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31m/usr/lib/python3.11/re/__init__.py\u001b[0m:294: in _compile\n    \u001b[0mp = _compiler.compile(pattern, flags)\u001b[90m\u001b[39;49;00m\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31m/usr/lib/python3.11/re/_compiler.py\u001b[0m:743: in compile\n    \u001b[0mp = _parser.parse(p, flags)\u001b[90m\u001b[39;49;00m\n        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31m/usr/lib/python3.11/re/_parser.py\u001b[0m:980: in parse\n    \u001b[0mp = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, \u001b[94m0\u001b[39;49;00m)\u001b[90m\u001b[39;49;00m\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31m/usr/lib/python3.11/re/_parser.py\u001b[0m:455: in _parse_sub\n    \u001b[0mitemsappend(_parse(source, state, verbose, nested + \u001b[94m1\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31m/usr/lib/python3.11/re/_parser.py\u001b[0m:612: in _parse\n    \u001b[0m\u001b[94mraise\u001b[39;49;00m source.error(msg, \u001b[96mlen\u001b[39;49;00m(this) + \u001b[94m1\u001b[39;49;00m + \u001b[96mlen\u001b[39;49;00m(that))\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   re.error: bad character range a-Z at position 11\u001b[0m\n\u001b[31m\u001b[1m_____________ TestSecurityCompliance.test_secret_scanning_in_logs ______________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_security_contract.py\u001b[0m:108: in test_secret_scanning_in_logs\n    \u001b[0m\u001b[94massert\u001b[39;49;00m \u001b[33m\"\u001b[39;49;00m\u001b[33mHDHF\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m \u001b[95min\u001b[39;49;00m sanitized  \u001b[90m# Last 4 chars visible\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   AssertionError: assert 'HDHF' in 'Processing transaction with key: SDJH*******************************************JDHF'\u001b[0m\n\u001b[31m\u001b[1m___________ TestContractSimulation.test_simulation_failure_handling ____________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_soroban_contract.py\u001b[0m:111: in test_simulation_failure_handling\n    \u001b[0m\u001b[94massert\u001b[39;49;00m simulation[\u001b[33m\"\u001b[39;49;00m\u001b[33msuccess\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m] \u001b[95mis\u001b[39;49;00m \u001b[94mFalse\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   assert True is False\u001b[0m\n\u001b[31m\u001b[1m________ TestContractSimulation.test_simulation_gas_estimation_accuracy ________\u001b[0m\n\u001b[1m\u001b[31mtests/unit/test_stellar_soroban_contract.py\u001b[0m:135: in test_simulation_gas_estimation_accuracy\n    \u001b[0m\u001b[94massert\u001b[39;49;00m simulation[\u001b[33m\"\u001b[39;49;00m\u001b[33mgas_used\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m] == \u001b[94m125000\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[1m\u001b[31mE   assert 150000 == 125000\u001b[0m\n\u001b[33m=============================== warnings summary ===============================\u001b[0m\nvenv/lib/python3.11/site-packages/stellar_sdk/xdr/account_entry.py:5\n  /home/abz/projects/stellar-hummingbot-connector-v3/venv/lib/python3.11/site-packages/stellar_sdk/xdr/account_entry.py:5: DeprecationWarning: 'xdrlib' is deprecated and slated for removal in Python 3.13\n    from xdrlib import Packer, Unpacker\n\ntests/unit/test_stellar_exchange_contract.py:269\n  /home/abz/projects/stellar-hummingbot-connector-v3/tests/unit/test_stellar_exchange_contract.py:269: PytestUnknownMarkWarning: Unknown pytest.mark.performance - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.performance\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n\u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_chain_contract.py::\u001b[1mTestTransactionBuilding::test_transaction_building_accuracy\u001b[0m - AttributeError: 'ModernStellarChainInterface' object has no attribute 'build_payment_transaction'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_chain_contract.py::\u001b[1mTestTransactionBuilding::test_transaction_building_with_custom_fee\u001b[0m - AttributeError: 'ModernStellarChainInterface' object has no attribute 'build_payment_transaction'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_chain_contract.py::\u001b[1mTestTransactionBuilding::test_transaction_building_validation_failure\u001b[0m - AttributeError: 'ModernStellarChainInterface' object has no attribute 'build_payment_transaction'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_chain_contract.py::\u001b[1mTestSequenceNumberHandling::test_sequence_conflict_resolution\u001b[0m - AttributeError: 'str' object has no attribute 'text'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_chain_contract.py::\u001b[1mTestSequenceNumberHandling::test_sequence_number_refresh\u001b[0m - AttributeError: 'ModernStellarChainInterface' object has no attribute '_refresh_sequence_number'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_chain_contract.py::\u001b[1mTestSequenceNumberHandling::test_max_retry_limit_exceeded\u001b[0m - AttributeError: 'str' object has no attribute 'text'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestStellarExchangeInitialization::test_exchange_initialization_success\u001b[0m - ModuleNotFoundError: No module named 'hummingbot.core'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestStellarExchangeInitialization::test_exchange_initialization_network_failure\u001b[0m - ModuleNotFoundError: No module named 'hummingbot.core'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestTradingPairValidation::test_trading_pair_validation_success\u001b[0m - AttributeError: 'StellarExchange' object has no attribute '_validate_trading_pairs'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestTradingPairValidation::test_trading_pair_validation_invalid_format\u001b[0m - AttributeError: 'StellarExchange' object has no attribute '_validate_trading_pairs'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestTradingPairValidation::test_trading_pair_normalization\u001b[0m - AttributeError: 'StellarExchange' object has no attribute '_normalize_trading_pairs'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestBalanceQuerying::test_balance_query_accuracy\u001b[0m - AttributeError: 'StellarExchange' object has no attribute 'get_account_balances'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestBalanceQuerying::test_balance_query_network_error_handling\u001b[0m - AttributeError: 'StellarExchange' object has no attribute 'get_account_balances'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestBalanceQuerying::test_balance_caching_mechanism\u001b[0m - AttributeError: 'StellarExchange' object has no attribute 'get_account_balances'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestPerformanceBenchmarks::test_order_placement_latency_sla\u001b[0m - TypeError: StellarExchange.place_order() got an unexpected keyword argument 'trade_type'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestPerformanceBenchmarks::test_concurrent_operations_throughput\u001b[0m - AssertionError: Success rate 0.0 below 95% requirement\nassert 0.0 >= 0.95\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_exchange_contract.py::\u001b[1mTestExchangeLifecycle::test_exchange_graceful_shutdown\u001b[0m - ModuleNotFoundError: No module named 'hummingbot.core'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestOptimalPathFinding::test_multi_hop_path_optimization\u001b[0m - AssertionError: assert 2 == 3\n +  where 2 = len([<stellar_sdk.asset.Asset object at 0x7f727725d050>, <stellar_sdk.asset.Asset object at 0x7f727725f090>])\n +    where [<stellar_sdk.asset.Asset object at 0x7f727725d050>, <stellar_sdk.asset.Asset object at 0x7f727725f090>] = PathPaymentRoute(path=[<stellar_sdk.asset.Asset object at 0x7f727725d050>, <stellar_sdk.asset.Asset object at 0x7f7277...ct=Decimal('0.005'), confidence_score=Decimal('0.90'), expires_at=1757604449.856942, dex_sources=[], gas_estimate=None).path\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_security_contract.py::\u001b[1mTestSecurityCompliance::test_no_hardcoded_secrets_in_codebase\u001b[0m - re.error: bad character range a-Z at position 11\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_security_contract.py::\u001b[1mTestSecurityCompliance::test_secret_scanning_in_logs\u001b[0m - AssertionError: assert 'HDHF' in 'Processing transaction with key: SDJH*******************************************JDHF'\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestContractSimulation::test_simulation_failure_handling\u001b[0m - assert True is False\n\u001b[31mFAILED\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestContractSimulation::test_simulation_gas_estimation_accuracy\u001b[0m - assert 150000 == 125000\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestArbitrageDetection::test_arbitrage_opportunity_detection\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestArbitrageDetection::test_arbitrage_risk_assessment\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestArbitrageDetection::test_arbitrage_filtering_by_profitability\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestArbitrageDetection::test_cross_dex_arbitrage_detection\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestMEVProtection::test_mev_protection_private_mempool\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestMEVProtection::test_mev_protection_cost_benefit_analysis\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestMEVProtection::test_mev_protection_timing_considerations\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_path_engine_contract.py::\u001b[1mTestMEVProtection::test_mev_protection_failure_handling\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestCrossContractExecution::test_atomic_cross_contract_execution\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestCrossContractExecution::test_cross_contract_rollback_on_failure\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestCrossContractExecution::test_non_atomic_execution_partial_success\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestCrossContractExecution::test_cross_contract_simulation_before_execution\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestGasEstimation::test_gas_estimation_accuracy\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestGasEstimation::test_gas_estimation_complexity_scaling\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestGasEstimation::test_gas_estimation_caching\u001b[0m\n\u001b[31mERROR\u001b[0m tests/unit/test_stellar_soroban_contract.py::\u001b[1mTestGasEstimation::test_gas_estimation_network_conditions\u001b[0m\n\u001b[31m============= \u001b[31m\u001b[1m22 failed\u001b[0m, \u001b[32m43 passed\u001b[0m, \u001b[33m2 warnings\u001b[0m, \u001b[31m\u001b[1m16 errors\u001b[0m\u001b[31m in 2.58s\u001b[0m\u001b[31m =============\u001b[0m\n",
          "integration_tests": "simulated_passed",
          "performance_tests": "simulated_passed"
        },
        "duration": 9.707927465438843
      },
      "health_simulation": {
        "name": "health_simulation",
        "status": "success",
        "health_checks": {
          "/health": "healthy",
          "/ready": "healthy",
          "/metrics": "healthy",
          "/status": "healthy"
        },
        "duration": 2.003829002380371
      }
    },
    "overall_status": "warning"
  },
  "timestamp": "2025-09-11T15:27:06.541707",
  "environment": "simulated-staging",
  "status": "warning"
}